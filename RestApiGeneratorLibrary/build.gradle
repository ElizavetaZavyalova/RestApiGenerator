plugins {
    id 'java'
}

group = 'org.example'
version = 'Java_18.0'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compileOnly 'com.google.auto.service:auto-service:1.1.1'
    annotationProcessor 'com.google.auto.service:auto-service:1.1.1'
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
    implementation 'ch.qos.logback:logback-classic:1.4.5'
    implementation 'com.squareup:javapoet:1.13.0'
    // json jackson-databind
    implementation 'com.fasterxml.jackson.core:jackson-core:2.14.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'

    //delete
    implementation 'org.jooq:jooq:3.17.8'
    //delete


    testCompileOnly "org.projectlombok:lombok:1.18.26"
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
    testImplementation 'ch.qos.logback:logback-classic:1.4.5'
    //testImplementation 'com.google.testing.compile:compile-testing:0.21.0'
    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation 'org.assertj:assertj-core:3.24.2'
    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.1'
    //testLauncher
    testImplementation "org.junit.platform:junit-platform-launcher:1.10.0"
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation 'org.mockito:mockito-core:5.8.0'
    // https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'

}

test {
    useJUnitPlatform()

    jvmArgs += [
            '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED'
    ]
}
compileJava {

    options.compilerArgs = [
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
    ]
}
compileTestJava {

    options.compilerArgs = [
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports', 'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
    ]
}
tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.forkOptions.jvmArgs += [
            '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED'
    ]
}

jar {
    def jars = configurations.runtimeClasspath.files.collect {
        "lib/${it.name}"
    }
    manifest {
        attributes 'Main-Class': 'org.example.Main',
                'Class-Path': jars.join(' ')
    }
}
tasks.register('copyAllDependencies', Copy) {
    from(configurations.runtimeClasspath.files)
    into("${buildDir}/libs/lib")
}
jar.dependsOn('copyAllDependencies')