plugins {
    id 'java'
}
group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
}
String restApiGeneratorProjectPath='P:\\Projects\\JetBrains\\IntelliJIDEA\\vkr\\RestApiGenerator\\'
String restApiGeneratorPath=restApiGeneratorProjectPath+'RestApiGeneratorLibrary\\build\\libs\\RestApiGeneratorLibrary-Java_18.0.jar'

dependencies {
    compileOnly files(restApiGeneratorPath)
    annotationProcessor files(restApiGeneratorPath)
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    implementation 'ch.qos.logback:logback-classic:1.4.5'


    testCompileOnly "org.projectlombok:lombok:1.18.26"
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'
    testImplementation 'com.google.truth:truth:1.1'
    testImplementation 'ch.qos.logback:logback-classic:1.4.5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}
test {
    useJUnitPlatform()
}


tasks.withType(JavaCompile).configureEach {
    //Запуск .jar если используются библиотеки внутренего
    // апи(Нужно для запуска .jar препроцессора анотаций) лишние потом удалю
    options.fork = true
    options.forkOptions.jvmArgs += [
            '--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
    ]
}

jar {
    def jars=configurations.runtimeClasspath.files.collect {
        "lib/${it.name}"
    }
    manifest {
        attributes 'Main-Class': 'org.example.Main',
        'Class-Path':jars.join(' ')
    }
}
tasks.register('copyAllDependencies', Copy) {
    from(configurations.runtimeClasspath.files)
    into("${buildDir}/libs/lib")
}
jar.dependsOn('copyAllDependencies')
